
from datetime import datetime, time, timedelta
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = '8028029772:AAHr6CUMSmc3Hrk4-GY-sbjcEgRAUGbcByw'
ADMIN_ID = 420626866  # @Kaliakpari ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# –ö–Ω–æ–ø–∫–∏
gender_kb = ReplyKeyboardMarkup(resize_keyboard=True)
gender_kb.add(KeyboardButton("–ú—É–∂—á–∏–Ω–∞"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞"))

payment_kb = ReplyKeyboardMarkup(resize_keyboard=True)
payment_kb.add(KeyboardButton("Kaspi"), KeyboardButton("Halyk"))

def is_working_hours():
    now = datetime.utcnow() + timedelta(hours=5)  # UTC+5
    return time(9, 0) <= now.time() <= time(21, 0)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if not is_working_hours():
        await message.answer("–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å 9:00 –¥–æ 21:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã.")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def photo_handler(message: types.Message):
    if not is_working_hours():
        await message.answer("–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å 9:00 –¥–æ 21:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê—Å—Ç–∞–Ω—ã.")
        return
    user_data[message.from_user.id] = {'photo_id': message.photo[-1].file_id}
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)

@dp.message_handler(lambda message: message.text in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"])
async def gender_handler(message: types.Message):
    user_data[message.from_user.id]['gender'] = message.text
    await message.answer("–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –∏ –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175—Å–º, 70–∫–≥).")

@dp.message_handler(lambda message: True if message.from_user.id in user_data and 'size' not in user_data[message.from_user.id] else False)
async def size_handler(message: types.Message):
    user_data[message.from_user.id]['size'] = message.text
    await message.answer("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ê—Å—Ç–∞–Ω–µ (–∞–¥—Ä–µ—Å, –∫–≤–∞—Ä—Ç–∏—Ä—É,–ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä).")

@dp.message_handler(lambda message: True if message.from_user.id in user_data and 'address' not in user_data[message.from_user.id] else False)
async def address_handler(message: types.Message):
    user_data[message.from_user.id]['address'] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb)

@dp.message_handler(lambda message: message.text in ["Kaspi", "Halyk"])
async def payment_handler(message: types.Message):
    user_data[message.from_user.id]['payment'] = message.text
    await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ Kaspi –∏–ª–∏ Halyk.")

@dp.message_handler(lambda message: message.text.startswith('+') or message.text.replace(' ', '').isdigit())
async def phone_handler(message: types.Message):
    user_data[message.from_user.id]['phone'] = message.text
    await message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'phone' in user_data[message.from_user.id] and 'promo' not in user_data[message.from_user.id])
async def promo_handler(message: types.Message):
    user_data[message.from_user.id]['promo'] = message.text
    data = user_data[message.from_user.id]

    msg = (
        "üßæ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–†–∞–∑–º–µ—Ä—ã: {data['size']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data['payment']}\n"
        f"–ù–æ–º–µ—Ä: {data['phone']}\n"
        f"–ü—Ä–æ–º–æ–∫–æ–¥: {data['promo']}"
    )
    try:
        await bot.send_photo(chat_id=ADMIN_ID, photo=data['photo_id'], caption=msg)
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    user_data.pop(message.from_user.id, None)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
